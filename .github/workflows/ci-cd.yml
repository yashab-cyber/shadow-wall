name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "18"

jobs:
  # 🔍 Code Quality and Linting
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: 🎨 Run Black (Code Formatting)
      run: black --check --diff src/ tests/

    - name: 📊 Run isort (Import Sorting)
      run: isort --check-only --diff src/ tests/

    - name: 🔍 Run Flake8 (Linting)
      run: flake8 src/ tests/

    - name: 🏷️ Run MyPy (Type Checking)
      run: mypy src/

    - name: 🔒 Run Bandit (Security Linting)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: 📊 Upload Bandit Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # 🧪 Unit and Integration Tests
  test:
    name: 🧪 Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: 🧪 Run Unit Tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        SHADOWWALL_TEST_MODE: true

    - name: 🔗 Run Integration Tests
      run: |
        pytest tests/integration/ -v
      env:
        SHADOWWALL_TEST_MODE: true

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: 📊 Upload Coverage Reports
      uses: actions/upload-artifact@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      with:
        name: coverage-reports
        path: htmlcov/

  # 🔒 Security Testing
  security:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep

    - name: 🔍 Run Safety (Dependency Security)
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: 🔒 Run Bandit (Security Linting)
      run: bandit -r src/ -f json -o bandit-security.json

    - name: 🔍 Run Semgrep (SAST)
      run: |
        python -m semgrep --config=auto src/ --json --output=semgrep-report.json
      continue-on-error: true

    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-security.json
          semgrep-report.json

  # 🐳 Container Testing
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: shadowwall-ai:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker image
      run: |
        docker run --rm shadowwall-ai:test python -c "import src; print('Import successful')"

    - name: 🔍 Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'shadowwall-ai:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 📊 Performance Testing
  performance:
    name: 📊 Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust

    - name: 🚀 Run Performance Tests
      run: |
        pytest tests/performance/ -v --benchmark-json=benchmark.json

    - name: 📊 Upload Benchmark Results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # 📦 Build and Release
  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.event_name == 'release'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📥 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 📦 Build package
      run: python -m build

    - name: 🔍 Check package
      run: twine check dist/*

    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # 🐳 Docker Build and Push
  docker-release:
    name: 🐳 Docker Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: shadowwall/shadowwall-ai
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 📚 Documentation
  docs:
    name: 📚 Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📥 Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

    - name: 📚 Build documentation
      run: mkdocs build

    - name: 📊 Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/

    - name: 🚀 Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # 📈 Deployment Status
  deployment-status:
    name: 📈 Deployment Status
    runs-on: ubuntu-latest
    needs: [build, docker-release, docs]
    if: always() && github.event_name == 'release'
    steps:
    - name: 📊 Report deployment status
      run: |
        echo "🚀 Deployment Status:"
        echo "📦 Package Build: ${{ needs.build.result }}"
        echo "🐳 Docker Release: ${{ needs.docker-release.result }}"
        echo "📚 Documentation: ${{ needs.docs.result }}"

    - name: 📧 Notify on success
      if: needs.build.result == 'success' && needs.docker-release.result == 'success'
      run: |
        echo "✅ Release deployment successful!"
        echo "🎉 ShadowWall AI ${{ github.event.release.tag_name }} is now available!"

    - name: 🚨 Notify on failure
      if: needs.build.result == 'failure' || needs.docker-release.result == 'failure'
      run: |
        echo "❌ Release deployment failed!"
        echo "🔍 Please check the logs for details."
